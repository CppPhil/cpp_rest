#ifndef INCG_CR_TEST_TYPE_HPP
#define INCG_CR_TEST_TYPE_HPP
#include <cstdint> // std::uint32_t, std::uint64_t
#include <string> // std::string

namespace cr
{
// Forward declare the repository type that will be a friend.
class TestTypeRepository;

/*!
 * \brief Example type to be put into the MySQL database.
**/
class TestType
{
public:
    using this_type = TestType;

    // Give access to the private constructor to the Repository.
    friend class TestTypeRepository;

    /*!
     * \brief Creates an invalid TestType object with an invalid ID.
     * \param str The string to use.
     * \param num The number to use.
     * \note Use the Repository to create TestType objects.
    **/
    TestType(std::string str, std::uint32_t num);

    /*!
     * \brief Accessor function for the string.
     * \return A constant reference to the string data member.
    **/
    const std::string &getStr() const noexcept;

    /*!
     * \brief Accessor function for the number.
     * \return A copy of the std::uint32_t number stored in this object.
    **/
    std::uint32_t getNum() const noexcept;

    /*!
     * \brief Accessor function for the ID.
     * \return The unique ID assigned by the MySQL database if this object is
     *         valid, otherwise will return 0.
    **/
    std::uint64_t getId() const noexcept;

private:
    /*!
     * \brief Constructor used by the Repository to create TestType objects.
     * \param str The string to use.
     * \param num The number to use.
     * \param id The ID automatically generated by the MySQL database.
    **/
    TestType(std::string str, std::uint32_t num, std::uint64_t id);

    std::uint64_t m_id; /*!< The unique ID of this object */
    std::uint32_t m_num; /*!< The number */
    std::string m_str; /*!< The string */
};

/*!
 * \brief Compares two TestType objects for equality.
 * \param lhs The first operand.
 * \param rhs The second operand.
 * \return true if 'lhs' and 'rhs' are considered equal, otherwise false.
**/
bool operator==(const TestType &lhs, const TestType &rhs);

/*!
 * \brief Compares two TestType objects for inequality.
 * \param lhs The first operand.
 * \param rhs The second operand.
 * \return true if 'lhs' and 'rhs' are considered not equal, otherwise false.
**/
bool operator!=(const TestType &lhs, const TestType &rhs);
} // namespace cr
#endif // INCG_CR_TEST_TYPE_HPP
